# Use this with the complete assignment folder
# x and t will be given as input
# You have to calculate the next value of x as in the next x at which the car will be present
# Also you have to calculate veloity of the car using the given/current x and t and previous x and t
# To add any new packages to pycharm follow: file - settings - project interpreter - gear symbol - select the environment as in the version
# then come back - + symbol at right side - search your package - install - you will find it in th list of packages
import numpy as np
from sim.sim1d import sim_run

# Simulator options.
options = {}
options['FIG_SIZE'] = [8,8]
options['CONSTANT_SPEED'] = False

class KalmanFilterToy:
    def __init__(self):
        self.v = 0
        self.prev_x = 0
        self.prev_t = 0
    def predict(self,t):
        xn = self.prev_x + self.v*(t - self.prev_t)
        prediction = xn
        return prediction
    def measure_and_update(self,x,t):
        measured_v = (x - self.prev_x)/(t - self.prev_t)
        self.v = measured_v # If you make the constant speed false then use this:self.v = self.v*0.6 + measured_v*0.4 

        self.prev_x = x
        self.prev_t = t
        return


sim_run(options,KalmanFilterToy)
# dedcution:
Assume a and b as weightages in  : self.v = self.v * a + measured_v * b
See if you have:
Case I:  a > b
        Then the velocity calculated reaches the actual value:
        Smoothly - longest response state time
        Error is very low - Oscillations after steady state is low
        Longer time to reach the actual value
Case II:  a = b
        Then the velocity calculated reaches the actual value:
        Faster than before-steeper curve
        Error is low but not as the earlier one
        Realative shorter time to reach the actual value
Case III:  a < b
        Then the velocity calculated reaaches the actual value:
        Steeply - fastest - shortest response state time
        Error is very high -  Oscillations after steady state is high
        Shortest time to reach the actual value
        
This is just line Kp, Kd and Ki.

You can also think of it as:  self.v = self.v + X * (measured_v - self.v)
So as you change the X, you change the weightage to the change.
It's a trade-off between how fast the system reacts and how small the error is.


