Kalman Assignment 2

Imagine Kalman filter as:

x(k) = K(k) * z(k) + (1 - K(k)) * x(k-1) where K is an instant of time
So basically weigtage to old estimates and current measurement such that both add upto 1 and therefore are inversely proportional.
(http://bilgin.esme.org/BitsAndBytes/KalmanFilterforDummies)


Basic equations:

x(k+1) = A(orF) * x(k) + B * u(k) + w(k)

w(k) is the process noise

z(k+1) = H * x(k) + v(k)

v(k) is the measurement noise 

R = Cov(v(k))

Points:

Linear algebra use

Equations of motion:

x(t+1) = x(t) + xdot*dt
y(t+1) = y(t) + ydot*dt

X -  state vector 
X = [ x y xdot ydot]'

F - State transition matrix
F = [1  0  dt  0
     0  1  0   dt] 
X (t+1) = F * X(t)

P - Uncertainity matrix - n(states) * n(states)
P = [p1 0  0  0
     0  p2 0  0
     0  0  p3 0
     0  0  0 p4]
Represents the uncertainity in the estimated values of the system. 
It is the difference between the actual values and estimated values.
Higher the value, more certian you are.
Zero means the uncertainity is highest and from o/p the estimate error keeps on increasing
If velocity uncertinity is low, then vel estimate goes above the cual value starting from zero and then comes down on it. - overshoot
Lower the x uncertainity, higher the value of p1 and higher the settling time and lesser the overshoot.

H - Measurement matrix - n(measurements) * n(states)
H = [ a 0;
      b 0;]
Shows the parameter that is measured. Always has values 1/0.

R - Measurement Uncertainity - Error in sensor/hardware - n(measurements) * n(measurements)
R = [ r1 0
      0  r2 ]
Increasing R increases the error settling time and the maximum error estimate

When the velocity changes:

Normal values of P - very slow adaptation - longer rise time and settling time - very slow - less reactive
Therefore, P/esimate is more confident than required - so basically you should give more weightage to recent values.
Add error at end of every update to P - decreases onfidence level of estimate - but fast reaction - more overshoot - longer settling time
Then, 

Playing with R:
Increasing  - increases the rise time - slower reaction - decreases settling time -  less overshoot
Decreasing  - opp.

Playing with P:
When p1 = p2:
Increasing - opp.
Decreasing - increases the rise time - slower reaction - increases settling time - more overshoot

Error added= 0.1 & R = 0.01
When p1<p2:
increases the rise time - slower reaction - decreases settling time - less overshoot

When p1>p2:
decreases the rise time - faster reaction - increases settling time - more overshoot (not much effect)

Playing with added error:
Increasing  - increases the rise time - slower reaction - increases settling time - more overshoot
Decreasing  - opp.

Algorithm Flow:
 
Prediction/Time Update:
 
x(k) = F * x(k-1)
P(k) = F * P(k-1) * F'
      
Correction/Measurement update:

Z = measurement matrix (row matirx)
Error = E = Z' - H*x
S = H * P * H' + R
K = P * H' * inverse(S)
x(k+1) = x(k) + K * E
P(K+1) = (I - K * H) * P

It's basically your are assigning weightage to past estimted and curent measurement value and changing it real time.



